/*
 * Copyright 2020 Kaj Wortel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.simple_tools;

/**
 * 
 */
public final class FastMath {

    /* ------------------------------------------------------------------------
     * Constructor.
     * ------------------------------------------------------------------------
     */
    @Deprecated
    private FastMath() { }


    /* ------------------------------------------------------------------------
     * Functions.
     * ------------------------------------------------------------------------
     */
    /**
     * Fast method to compute {@code log_2(n)}. <br>
     * Original source: <br>
     * <url>https://stackoverflow.com/questions/3305059/how-do-you-calculate-log-base-2-in-java-for-integers</url>
     *
     * @param n The input value.
     *
     * @return The equivalent of {@code (int) Math.floor(Math.log(n) / Math.log(2))}.
     */
    public static int log2Floor(int n) {
        if (n <= 0) throw new IllegalArgumentException();
        return 31 - Integer.numberOfLeadingZeros(n);
    }

    /**
     * Fast method to compute {@code log_2(n)}. <br>
     * Modified from original source: <br>
     * <url>https://stackoverflow.com/questions/3305059/how-do-you-calculate-log-base-2-in-java-for-integers</url>
     *
     * @param n The input value.
     *
     * @return The equivalent of {@code (int) Math.floor(Math.log(n) / Math.log(2))}.
     */
    public static int log2Ceil(int n) {
        if (n <= 0) throw new IllegalArgumentException();
        return 32 - Integer.numberOfLeadingZeros(n - 1);
    }

    /**
     * Calculates the power of a base. <br>
     * Calculates the power significantly faster compared to
     * {@link Math#pow(double, double)}, but only accepts integer powers.
     *
     * @implNote
     * <ul>
     *   <li> The results that did't differ more then 2 of the least significant
     *        digits from the result generated by the other method. </li>
     *   <li> For each test the sample size was 214.748.360. </li>
     * </ul>
     *
     * @param base The base of the operation.
     * @param pow  The power of the operation.
     *
     * @return The result of {@code base ^ pow}.
     */
    public static double intPow(double base, int pow) {
        if (pow > 0) {
            double r = base;
            double f = 1;

            while (pow != 1) {
                if (pow % 2 == 0) {
                    r *= r;
                    pow >>= 1;

                } else if (pow % 3 == 0) {
                    r *= r * r;
                    pow /= 3;

                } else if (pow % 5 == 0) {
                    double r2 = r * r;
                    r *= r2 * r2;
                    pow /= 5;

                } else {
                    f *= r;
                    pow -= 1;
                }
            }

            return f * r;

        } else if (pow < 0) {
            return 1.0 / intPow(base, -pow);

        } else {
            return 1.0;
        }
    }
    
    
}
